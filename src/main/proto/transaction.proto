syntax = "proto3";

package org.mos.core.model;

message TransactionInfo {
	bytes hash = 1;
	TransactionBody body = 2;
	bytes signature = 3;
	TransactionStatus status = 4;
	TransactionNode node = 5;
	int64 accepttimestamp = 6;
}

message TransactionBody {
	int32 nonce = 1;
	bytes address = 2;
	repeated TransactionOutput outputs = 3;
	// bytes fee = 4;
	TransactionData data = 5;
	bytes exdata = 6;
	int64 timestamp = 7;
}

message TransactionOutput {
	bytes address = 1;
	bytes amount = 2;
	bytes token = 3;
	bytes tokenAmount = 4;
	bytes symbol = 5;
	repeated bytes cryptoToken = 6;
}

message TransactionNode {
	string nid = 1;
	bytes address = 2;
}

message TransactionStatus {
	bytes status = 1;
	bytes result = 2;
	bytes hash = 3;
	int64 height = 4;
	int64 timestamp = 5;
}

message BroadcastTransactionMsg {
	repeated bytes txHash = 1;
	repeated bytes txDatas = 2;
}

message TransactionData {
	DataType type = 1;
	UnionAccountData unionAccountData = 10;
	UnionAccountTransferData unionAccountTransferData = 11;
	UnionAccountConfirmData unionAccountConfirmData = 12;
	PublicCryptoTokenData cryptoTokenData = 20;
	OwnerTokenData ownerTokenData = 30;
	UserTokenData userTokenData = 31;
	PublicContractData publicContractData = 40;
	CallContractData callContractData = 41;
	EVFSReqFileUploadData reqFileUploadData = 42;
	EVFSAuthoriseFileOPData authoriseFileOPData = 43;
	EVFSConfirmFileUploadData confirmFileUploadData = 44;
	
	enum DataType {
		NONE = 0;
	    PUBLICCRYPTOTOKEN = 1;
	    OWNERTOKEN = 2;
	    USERTOKEN = 3;
	    PUBLICCONTRACT = 4;
	    CALLCONTRACT = 5;
	    PUBLICUNIONACCOUNT = 6;
	    UNIONACCOUNTTRANSFER = 7;
	    UNIONACCOUNTCONFIRM = 8;
		EVFSREQFILEUPLOAD = 9;//文件上传申请
		EVFSAUTHORISEFILEOP = 10;//文件访问授权
		EVFSCONFIRMFILEUPLOAD = 11;//文件上传确认
	}
	message PublicCryptoTokenData {
		int64 total = 1;
		bytes symbol = 2;
		repeated string name = 3;
		repeated string code = 4;
		repeated string prop = 5;
	}
	message OwnerTokenData {
		bytes token = 1;
		bytes amount = 2;
		OwnerTokenOpCode opCode = 3;
		enum OwnerTokenOpCode {
			PUBLIC = 0;
			BURN = 1;
			MINT = 2;
		}
	}
	message UserTokenData {
		bytes token = 1;
		bytes address = 2;
		bytes amount = 3;
		UserTokenOpCode opCode = 4;
		enum UserTokenOpCode {
			FREEZE = 0;
			UNFREEZE = 1;
			LOCK = 2;
			UNLOCK = 3;
		}
	}
	message PublicContractData {
		bytes data = 1;
		bytes code = 2;
		bytes amount = 3;
	}
	message CallContractData {
		bytes data = 1;
		bytes contract = 2;
		bytes amount = 3;
	}
	message UnionAccountData {
		bytes max = 1;
		bytes acceptMax = 2;
		int32 acceptLimit = 3;
		repeated bytes address = 4;
	}
	message UnionAccountTransferData {
		bytes fromSubAccount = 1;
	}
	message UnionAccountConfirmData {
		bytes hash = 1;
		bytes fromSubAccount = 2;
	}
	
	message EVFSReqFileUploadData{
		bytes 	filename = 1;//文件名
		int32  	fileSize = 2;	//文件大小
		bytes 	fileDesc = 3;//文件描述
		bytes	fileSign = 4;//文件内容MD5
		int32  	repeatCount = 5;//备份个数
		int32   sliceCount = 6;//分片数量
		repeated bytes authoriseAddrs = 7;//授权地址列表
		repeated bytes nodeUrls = 8;//上传节点地址列表
		bytes exData = 9;//附加信息
	}
	
	message EVFSAuthoriseFileOPData{
		bytes fileHash = 1;//
		repeated bytes addAddrs = 2;//添加授权地址列表
		repeated bytes removeAddrs = 3;//移除授权地址列表
	}
	
	message EVFSConfirmFileUploadData{
		bytes data = 1;//
		bytes fileHash = 2;//
	}
	
}


//message FilePart{
//	int32	index = 1;
//	int32	skip = 2;
//	int32	size = 3;
//	string	part_uuid = 4;
//	string	part_secret_key = 5;
//	repeated string	nodes = 6;//在哪些节点
//	string	part_sign  = 7;//签名数据
//}
//message FileInfo{
//	string from = 1;	//从哪个地址来的
//	int32  file_size = 2;	//文件大小
//	string filename = 3;//文件名
//	string file_desc = 4;//文件描述
//	repeated FilePart parts = 7;//
//	int32	repeat_count = 8;//备份个数
//	int32 	slice_count = 9;//分片数量
//}
